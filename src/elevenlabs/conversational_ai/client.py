# This file was auto-generated by Fern from our API Definition.

import typing

from .. import core
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.add_knowledge_base_response_model import AddKnowledgeBaseResponseModel
from ..types.agent_platform_settings_request_model import AgentPlatformSettingsRequestModel
from ..types.conv_ai_webhooks import ConvAiWebhooks
from ..types.conversation_initiation_client_data_request_input import ConversationInitiationClientDataRequestInput
from ..types.conversation_initiation_client_data_webhook import ConversationInitiationClientDataWebhook
from ..types.conversation_signed_url_response_model import ConversationSignedUrlResponseModel
from ..types.conversational_config_api_model_input import ConversationalConfigApiModelInput
from ..types.create_agent_response_model import CreateAgentResponseModel
from ..types.create_phone_number_response_model import CreatePhoneNumberResponseModel
from ..types.embedding_model_enum import EmbeddingModelEnum
from ..types.evaluation_success_result import EvaluationSuccessResult
from ..types.get_agent_embed_response_model import GetAgentEmbedResponseModel
from ..types.get_agent_link_response_model import GetAgentLinkResponseModel
from ..types.get_agent_response_model import GetAgentResponseModel
from ..types.get_agents_page_response_model import GetAgentsPageResponseModel
from ..types.get_conv_ai_dashboard_settings_response_model import GetConvAiDashboardSettingsResponseModel
from ..types.get_conv_ai_settings_response_model import GetConvAiSettingsResponseModel
from ..types.get_conversation_response_model import GetConversationResponseModel
from ..types.get_conversations_page_response_model import GetConversationsPageResponseModel
from ..types.get_knowledge_base_dependent_agents_response_model import GetKnowledgeBaseDependentAgentsResponseModel
from ..types.get_knowledge_base_list_response_model import GetKnowledgeBaseListResponseModel
from ..types.get_phone_number_response_model import GetPhoneNumberResponseModel
from ..types.get_workspace_secrets_response_model import GetWorkspaceSecretsResponseModel
from ..types.knowledge_base_document_chunk_response_model import KnowledgeBaseDocumentChunkResponseModel
from ..types.knowledge_base_document_type import KnowledgeBaseDocumentType
from ..types.post_agent_avatar_response_model import PostAgentAvatarResponseModel
from ..types.post_workspace_secret_response_model import PostWorkspaceSecretResponseModel
from ..types.rag_index_response_model import RagIndexResponseModel
from ..types.twilio_outbound_call_response import TwilioOutboundCallResponse
from ..types.user_feedback_score import UserFeedbackScore
from .raw_client import AsyncRawConversationalAiClient, RawConversationalAiClient
from .types.conversational_ai_create_phone_number_request_body import ConversationalAiCreatePhoneNumberRequestBody
from .types.conversational_ai_get_knowledge_base_document_by_id_response import (
    ConversationalAiGetKnowledgeBaseDocumentByIdResponse,
)
from .types.patch_conv_ai_dashboard_settings_request_charts_item import PatchConvAiDashboardSettingsRequestChartsItem

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ConversationalAiClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawConversationalAiClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawConversationalAiClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawConversationalAiClient
        """
        return self._raw_client

    def get_signed_url(
        self, *, agent_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> ConversationSignedUrlResponseModel:
        """
        Get a signed url to start a conversation with an agent with an agent that requires authorization

        Parameters
        ----------
        agent_id : str
            The id of the agent you're taking the action on.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConversationSignedUrlResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.get_signed_url(agent_id='21m00Tcm4TlvDq8ikWAM', )
        """
        _response = self._raw_client.get_signed_url(agent_id=agent_id, request_options=request_options)
        return _response.data

    def twilio_outbound_call(
        self,
        *,
        agent_id: str,
        agent_phone_number_id: str,
        to_number: str,
        conversation_initiation_client_data: typing.Optional[ConversationInitiationClientDataRequestInput] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TwilioOutboundCallResponse:
        """
        Handle an outbound call via Twilio

        Parameters
        ----------
        agent_id : str

        agent_phone_number_id : str

        to_number : str

        conversation_initiation_client_data : typing.Optional[ConversationInitiationClientDataRequestInput]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TwilioOutboundCallResponse
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.twilio_outbound_call(agent_id='agent_id', agent_phone_number_id='agent_phone_number_id', to_number='to_number', )
        """
        _response = self._raw_client.twilio_outbound_call(
            agent_id=agent_id,
            agent_phone_number_id=agent_phone_number_id,
            to_number=to_number,
            conversation_initiation_client_data=conversation_initiation_client_data,
            request_options=request_options,
        )
        return _response.data

    def create_agent(
        self,
        *,
        conversation_config: ConversationalConfigApiModelInput,
        platform_settings: typing.Optional[AgentPlatformSettingsRequestModel] = OMIT,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateAgentResponseModel:
        """
        Create an agent from a config object

        Parameters
        ----------
        conversation_config : ConversationalConfigApiModelInput
            Conversation configuration for an agent

        platform_settings : typing.Optional[AgentPlatformSettingsRequestModel]
            Platform settings for the agent are all settings that aren't related to the conversation orchestration and content.

        name : typing.Optional[str]
            A name to make the agent easier to find

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateAgentResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        from elevenlabs import ConversationalConfigApiModelInput
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.create_agent(conversation_config=ConversationalConfigApiModelInput(), )
        """
        _response = self._raw_client.create_agent(
            conversation_config=conversation_config,
            platform_settings=platform_settings,
            name=name,
            request_options=request_options,
        )
        return _response.data

    def get_agent(
        self, agent_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAgentResponseModel:
        """
        Retrieve config for an agent

        Parameters
        ----------
        agent_id : str
            The id of an agent. This is returned on agent creation.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAgentResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.get_agent(agent_id='21m00Tcm4TlvDq8ikWAM', )
        """
        _response = self._raw_client.get_agent(agent_id, request_options=request_options)
        return _response.data

    def delete_agent(self, agent_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete an agent

        Parameters
        ----------
        agent_id : str
            The id of an agent. This is returned on agent creation.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.delete_agent(agent_id='21m00Tcm4TlvDq8ikWAM', )
        """
        _response = self._raw_client.delete_agent(agent_id, request_options=request_options)
        return _response.data

    def update_agent(
        self,
        agent_id: str,
        *,
        conversation_config: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        platform_settings: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAgentResponseModel:
        """
        Patches an Agent settings

        Parameters
        ----------
        agent_id : str
            The id of an agent. This is returned on agent creation.

        conversation_config : typing.Optional[typing.Optional[typing.Any]]

        platform_settings : typing.Optional[typing.Optional[typing.Any]]

        name : typing.Optional[str]
            A name to make the agent easier to find

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAgentResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.update_agent(agent_id='21m00Tcm4TlvDq8ikWAM', )
        """
        _response = self._raw_client.update_agent(
            agent_id,
            conversation_config=conversation_config,
            platform_settings=platform_settings,
            name=name,
            request_options=request_options,
        )
        return _response.data

    def get_agent_widget(
        self,
        agent_id: str,
        *,
        conversation_signature: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAgentEmbedResponseModel:
        """
        Retrieve the widget configuration for an agent

        Parameters
        ----------
        agent_id : str
            The id of an agent. This is returned on agent creation.

        conversation_signature : typing.Optional[str]
            An expiring token that enables a conversation to start. These can be generated for an agent using the /v1/convai/conversation/get_signed_url endpoint

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAgentEmbedResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.get_agent_widget(agent_id='21m00Tcm4TlvDq8ikWAM', )
        """
        _response = self._raw_client.get_agent_widget(
            agent_id, conversation_signature=conversation_signature, request_options=request_options
        )
        return _response.data

    def get_agent_link(
        self, agent_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAgentLinkResponseModel:
        """
        Get the current link used to share the agent with others

        Parameters
        ----------
        agent_id : str
            The id of an agent. This is returned on agent creation.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAgentLinkResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.get_agent_link(agent_id='21m00Tcm4TlvDq8ikWAM', )
        """
        _response = self._raw_client.get_agent_link(agent_id, request_options=request_options)
        return _response.data

    def post_agent_avatar(
        self, agent_id: str, *, avatar_file: core.File, request_options: typing.Optional[RequestOptions] = None
    ) -> PostAgentAvatarResponseModel:
        """
        Sets the avatar for an agent displayed in the widget

        Parameters
        ----------
        agent_id : str
            The id of an agent. This is returned on agent creation.

        avatar_file : core.File
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostAgentAvatarResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.post_agent_avatar(agent_id='21m00Tcm4TlvDq8ikWAM', )
        """
        _response = self._raw_client.post_agent_avatar(
            agent_id, avatar_file=avatar_file, request_options=request_options
        )
        return _response.data

    def get_agents(
        self,
        *,
        cursor: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        search: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAgentsPageResponseModel:
        """
        Returns a list of your agents and their metadata.

        Parameters
        ----------
        cursor : typing.Optional[str]
            Used for fetching next page. Cursor is returned in the response.

        page_size : typing.Optional[int]
            How many Agents to return at maximum. Can not exceed 100, defaults to 30.

        search : typing.Optional[str]
            Search by agents name.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAgentsPageResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.get_agents()
        """
        _response = self._raw_client.get_agents(
            cursor=cursor, page_size=page_size, search=search, request_options=request_options
        )
        return _response.data

    def get_conversations(
        self,
        *,
        cursor: typing.Optional[str] = None,
        agent_id: typing.Optional[str] = None,
        call_successful: typing.Optional[EvaluationSuccessResult] = None,
        call_start_before_unix: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetConversationsPageResponseModel:
        """
        Get all conversations of agents that user owns. With option to restrict to a specific agent.

        Parameters
        ----------
        cursor : typing.Optional[str]
            Used for fetching next page. Cursor is returned in the response.

        agent_id : typing.Optional[str]
            The id of the agent you're taking the action on.

        call_successful : typing.Optional[EvaluationSuccessResult]
            The result of the success evaluation

        call_start_before_unix : typing.Optional[int]
            Unix timestamp (in seconds) to filter conversations up to this start date.

        page_size : typing.Optional[int]
            How many conversations to return at maximum. Can not exceed 100, defaults to 30.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConversationsPageResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.get_conversations()
        """
        _response = self._raw_client.get_conversations(
            cursor=cursor,
            agent_id=agent_id,
            call_successful=call_successful,
            call_start_before_unix=call_start_before_unix,
            page_size=page_size,
            request_options=request_options,
        )
        return _response.data

    def get_conversation(
        self, conversation_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetConversationResponseModel:
        """
        Get the details of a particular conversation

        Parameters
        ----------
        conversation_id : str
            The id of the conversation you're taking the action on.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConversationResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.get_conversation(conversation_id='123', )
        """
        _response = self._raw_client.get_conversation(conversation_id, request_options=request_options)
        return _response.data

    def delete_conversation(
        self, conversation_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Delete a particular conversation

        Parameters
        ----------
        conversation_id : str
            The id of the conversation you're taking the action on.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.delete_conversation(conversation_id='21m00Tcm4TlvDq8ikWAM', )
        """
        _response = self._raw_client.delete_conversation(conversation_id, request_options=request_options)
        return _response.data

    def get_conversation_audio(
        self, conversation_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Iterator[bytes]:
        """
        Get the audio recording of a particular conversation

        Parameters
        ----------
        conversation_id : str
            The id of the conversation you're taking the action on.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Returns
        -------
        typing.Iterator[bytes]
            Successful Response
        """
        with self._raw_client.get_conversation_audio(conversation_id, request_options=request_options) as r:
            yield from r.data

    def post_conversation_feedback(
        self,
        conversation_id: str,
        *,
        feedback: UserFeedbackScore,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Send the feedback for the given conversation

        Parameters
        ----------
        conversation_id : str
            The id of the conversation you're taking the action on.

        feedback : UserFeedbackScore
            Either 'like' or 'dislike' to indicate the feedback for the conversation.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.post_conversation_feedback(conversation_id='21m00Tcm4TlvDq8ikWAM', feedback="like", )
        """
        _response = self._raw_client.post_conversation_feedback(
            conversation_id, feedback=feedback, request_options=request_options
        )
        return _response.data

    def create_phone_number(
        self,
        *,
        request: ConversationalAiCreatePhoneNumberRequestBody,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreatePhoneNumberResponseModel:
        """
        Import Phone Number from provider configuration (Twilio or SIP trunk)

        Parameters
        ----------
        request : ConversationalAiCreatePhoneNumberRequestBody

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreatePhoneNumberResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        from elevenlabs import CreateTwilioPhoneNumberRequest
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.create_phone_number(request=CreateTwilioPhoneNumberRequest(phone_number='phone_number', label='label', sid='sid', token='token', ), )
        """
        _response = self._raw_client.create_phone_number(request=request, request_options=request_options)
        return _response.data

    def get_phone_number(
        self, phone_number_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetPhoneNumberResponseModel:
        """
        Retrieve Phone Number details by ID

        Parameters
        ----------
        phone_number_id : str
            The id of an agent. This is returned on agent creation.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetPhoneNumberResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.get_phone_number(phone_number_id='TeaqRRdTcIfIu2i7BYfT', )
        """
        _response = self._raw_client.get_phone_number(phone_number_id, request_options=request_options)
        return _response.data

    def delete_phone_number(
        self, phone_number_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Delete Phone Number by ID

        Parameters
        ----------
        phone_number_id : str
            The id of an agent. This is returned on agent creation.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.delete_phone_number(phone_number_id='TeaqRRdTcIfIu2i7BYfT', )
        """
        _response = self._raw_client.delete_phone_number(phone_number_id, request_options=request_options)
        return _response.data

    def update_phone_number(
        self,
        phone_number_id: str,
        *,
        agent_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetPhoneNumberResponseModel:
        """
        Update Phone Number details by ID

        Parameters
        ----------
        phone_number_id : str
            The id of an agent. This is returned on agent creation.

        agent_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetPhoneNumberResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.update_phone_number(phone_number_id='TeaqRRdTcIfIu2i7BYfT', )
        """
        _response = self._raw_client.update_phone_number(
            phone_number_id, agent_id=agent_id, request_options=request_options
        )
        return _response.data

    def get_phone_numbers(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[GetPhoneNumberResponseModel]:
        """
        Retrieve all Phone Numbers

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[GetPhoneNumberResponseModel]
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.get_phone_numbers()
        """
        _response = self._raw_client.get_phone_numbers(request_options=request_options)
        return _response.data

    def get_knowledge_base_list(
        self,
        *,
        cursor: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        search: typing.Optional[str] = None,
        show_only_owned_documents: typing.Optional[bool] = None,
        types: typing.Optional[
            typing.Union[KnowledgeBaseDocumentType, typing.Sequence[KnowledgeBaseDocumentType]]
        ] = None,
        use_typesense: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetKnowledgeBaseListResponseModel:
        """
        Get a list of available knowledge base documents

        Parameters
        ----------
        cursor : typing.Optional[str]
            Used for fetching next page. Cursor is returned in the response.

        page_size : typing.Optional[int]
            How many documents to return at maximum. Can not exceed 100, defaults to 30.

        search : typing.Optional[str]
            If specified, the endpoint returns only such knowledge base documents whose names start with this string.

        show_only_owned_documents : typing.Optional[bool]
            If set to true, the endpoint will return only documents owned by you (and not shared from somebody else).

        types : typing.Optional[typing.Union[KnowledgeBaseDocumentType, typing.Sequence[KnowledgeBaseDocumentType]]]
            If present, the endpoint will return only documents of the given types.

        use_typesense : typing.Optional[bool]
            If set to true, the endpoint will use typesense DB to search for the documents).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetKnowledgeBaseListResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.get_knowledge_base_list()
        """
        _response = self._raw_client.get_knowledge_base_list(
            cursor=cursor,
            page_size=page_size,
            search=search,
            show_only_owned_documents=show_only_owned_documents,
            types=types,
            use_typesense=use_typesense,
            request_options=request_options,
        )
        return _response.data

    def add_to_knowledge_base(
        self,
        *,
        name: typing.Optional[str] = OMIT,
        url: typing.Optional[str] = OMIT,
        file: typing.Optional[core.File] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AddKnowledgeBaseResponseModel:
        """
        Upload a file or webpage URL to create a knowledge base document. <br> <Note> After creating the document, update the agent's knowledge base by calling [Update agent](/docs/conversational-ai/api-reference/agents/update-agent). </Note>

        Parameters
        ----------
        name : typing.Optional[str]
            A custom, human-readable name for the document.

        url : typing.Optional[str]
            URL to a page of documentation that the agent will have access to in order to interact with users.

        file : typing.Optional[core.File]
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AddKnowledgeBaseResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.add_to_knowledge_base()
        """
        _response = self._raw_client.add_to_knowledge_base(
            name=name, url=url, file=file, request_options=request_options
        )
        return _response.data

    def create_knowledge_base_url_document(
        self, *, url: str, name: typing.Optional[str] = OMIT, request_options: typing.Optional[RequestOptions] = None
    ) -> AddKnowledgeBaseResponseModel:
        """
        Create a knowledge base document generated by scraping the given webpage.

        Parameters
        ----------
        url : str
            URL to a page of documentation that the agent will have access to in order to interact with users.

        name : typing.Optional[str]
            A custom, human-readable name for the document.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AddKnowledgeBaseResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.create_knowledge_base_url_document(url='url', )
        """
        _response = self._raw_client.create_knowledge_base_url_document(
            url=url, name=name, request_options=request_options
        )
        return _response.data

    def create_knowledge_base_file_document(
        self,
        *,
        file: core.File,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AddKnowledgeBaseResponseModel:
        """
        Create a knowledge base document generated form the uploaded file.

        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        name : typing.Optional[str]
            A custom, human-readable name for the document.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AddKnowledgeBaseResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.create_knowledge_base_file_document()
        """
        _response = self._raw_client.create_knowledge_base_file_document(
            file=file, name=name, request_options=request_options
        )
        return _response.data

    def create_knowledge_base_text_document(
        self, *, text: str, name: typing.Optional[str] = OMIT, request_options: typing.Optional[RequestOptions] = None
    ) -> AddKnowledgeBaseResponseModel:
        """
        Create a knowledge base document containing the provided text.

        Parameters
        ----------
        text : str
            Text content to be added to the knowledge base.

        name : typing.Optional[str]
            A custom, human-readable name for the document.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AddKnowledgeBaseResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.create_knowledge_base_text_document(text='text', )
        """
        _response = self._raw_client.create_knowledge_base_text_document(
            text=text, name=name, request_options=request_options
        )
        return _response.data

    def rag_index_status(
        self,
        documentation_id: str,
        *,
        model: EmbeddingModelEnum,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> RagIndexResponseModel:
        """
        In case the document is not RAG indexed, it triggers rag indexing task, otherwise it just returns the current status.

        Parameters
        ----------
        documentation_id : str
            The id of a document from the knowledge base. This is returned on document addition.

        model : EmbeddingModelEnum

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RagIndexResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.rag_index_status(documentation_id='21m00Tcm4TlvDq8ikWAM', model="e5_mistral_7b_instruct", )
        """
        _response = self._raw_client.rag_index_status(documentation_id, model=model, request_options=request_options)
        return _response.data

    def get_knowledge_base_document_by_id(
        self, documentation_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ConversationalAiGetKnowledgeBaseDocumentByIdResponse:
        """
        Get details about a specific documentation making up the agent's knowledge base

        Parameters
        ----------
        documentation_id : str
            The id of a document from the knowledge base. This is returned on document addition.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConversationalAiGetKnowledgeBaseDocumentByIdResponse
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.get_knowledge_base_document_by_id(documentation_id='21m00Tcm4TlvDq8ikWAM', )
        """
        _response = self._raw_client.get_knowledge_base_document_by_id(
            documentation_id, request_options=request_options
        )
        return _response.data

    def delete_knowledge_base_document(
        self, documentation_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Delete a document from the knowledge base

        Parameters
        ----------
        documentation_id : str
            The id of a document from the knowledge base. This is returned on document addition.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.delete_knowledge_base_document(documentation_id='21m00Tcm4TlvDq8ikWAM', )
        """
        _response = self._raw_client.delete_knowledge_base_document(documentation_id, request_options=request_options)
        return _response.data

    def get_dependent_agents(
        self,
        documentation_id: str,
        *,
        cursor: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetKnowledgeBaseDependentAgentsResponseModel:
        """
        Get a list of agents depending on this knowledge base document

        Parameters
        ----------
        documentation_id : str
            The id of a document from the knowledge base. This is returned on document addition.

        cursor : typing.Optional[str]
            Used for fetching next page. Cursor is returned in the response.

        page_size : typing.Optional[int]
            How many documents to return at maximum. Can not exceed 100, defaults to 30.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetKnowledgeBaseDependentAgentsResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.get_dependent_agents(documentation_id='21m00Tcm4TlvDq8ikWAM', )
        """
        _response = self._raw_client.get_dependent_agents(
            documentation_id, cursor=cursor, page_size=page_size, request_options=request_options
        )
        return _response.data

    def get_knowledge_base_document_content(
        self, documentation_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Get the entire content of a document from the knowledge base

        Parameters
        ----------
        documentation_id : str
            The id of a document from the knowledge base. This is returned on document addition.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.get_knowledge_base_document_content(documentation_id='21m00Tcm4TlvDq8ikWAM', )
        """
        _response = self._raw_client.get_knowledge_base_document_content(
            documentation_id, request_options=request_options
        )
        return _response.data

    def get_knowledge_base_document_part_by_id(
        self, documentation_id: str, chunk_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> KnowledgeBaseDocumentChunkResponseModel:
        """
        Get details about a specific documentation part used by RAG.

        Parameters
        ----------
        documentation_id : str
            The id of a document from the knowledge base. This is returned on document addition.

        chunk_id : str
            The id of a document RAG chunk from the knowledge base.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        KnowledgeBaseDocumentChunkResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.get_knowledge_base_document_part_by_id(documentation_id='21m00Tcm4TlvDq8ikWAM', chunk_id='chunk_id', )
        """
        _response = self._raw_client.get_knowledge_base_document_part_by_id(
            documentation_id, chunk_id, request_options=request_options
        )
        return _response.data

    def get_settings(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetConvAiSettingsResponseModel:
        """
        Retrieve Convai settings for the workspace

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConvAiSettingsResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.get_settings()
        """
        _response = self._raw_client.get_settings(request_options=request_options)
        return _response.data

    def update_settings(
        self,
        *,
        conversation_initiation_client_data_webhook: typing.Optional[ConversationInitiationClientDataWebhook] = OMIT,
        webhooks: typing.Optional[ConvAiWebhooks] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetConvAiSettingsResponseModel:
        """
        Update Convai settings for the workspace

        Parameters
        ----------
        conversation_initiation_client_data_webhook : typing.Optional[ConversationInitiationClientDataWebhook]

        webhooks : typing.Optional[ConvAiWebhooks]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConvAiSettingsResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.update_settings()
        """
        _response = self._raw_client.update_settings(
            conversation_initiation_client_data_webhook=conversation_initiation_client_data_webhook,
            webhooks=webhooks,
            request_options=request_options,
        )
        return _response.data

    def get_dashboard_settings(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetConvAiDashboardSettingsResponseModel:
        """
        Retrieve Convai dashboard settings for the workspace

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConvAiDashboardSettingsResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.get_dashboard_settings()
        """
        _response = self._raw_client.get_dashboard_settings(request_options=request_options)
        return _response.data

    def update_dashboard_settings(
        self,
        *,
        charts: typing.Optional[typing.Sequence[PatchConvAiDashboardSettingsRequestChartsItem]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetConvAiDashboardSettingsResponseModel:
        """
        Update Convai dashboard settings for the workspace

        Parameters
        ----------
        charts : typing.Optional[typing.Sequence[PatchConvAiDashboardSettingsRequestChartsItem]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConvAiDashboardSettingsResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.update_dashboard_settings()
        """
        _response = self._raw_client.update_dashboard_settings(charts=charts, request_options=request_options)
        return _response.data

    def get_secrets(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetWorkspaceSecretsResponseModel:
        """
        Get all workspace secrets for the user

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetWorkspaceSecretsResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.get_secrets()
        """
        _response = self._raw_client.get_secrets(request_options=request_options)
        return _response.data

    def create_secret(
        self, *, name: str, value: str, request_options: typing.Optional[RequestOptions] = None
    ) -> PostWorkspaceSecretResponseModel:
        """
        Create a new secret for the workspace

        Parameters
        ----------
        name : str

        value : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostWorkspaceSecretResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.create_secret(name='name', value='value', )
        """
        _response = self._raw_client.create_secret(name=name, value=value, request_options=request_options)
        return _response.data

    def delete_secret(self, secret_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a workspace secret if it's not in use

        Parameters
        ----------
        secret_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.conversational_ai.delete_secret(secret_id='secret_id', )
        """
        _response = self._raw_client.delete_secret(secret_id, request_options=request_options)
        return _response.data


class AsyncConversationalAiClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawConversationalAiClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawConversationalAiClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawConversationalAiClient
        """
        return self._raw_client

    async def get_signed_url(
        self, *, agent_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> ConversationSignedUrlResponseModel:
        """
        Get a signed url to start a conversation with an agent with an agent that requires authorization

        Parameters
        ----------
        agent_id : str
            The id of the agent you're taking the action on.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConversationSignedUrlResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.get_signed_url(agent_id='21m00Tcm4TlvDq8ikWAM', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_signed_url(agent_id=agent_id, request_options=request_options)
        return _response.data

    async def twilio_outbound_call(
        self,
        *,
        agent_id: str,
        agent_phone_number_id: str,
        to_number: str,
        conversation_initiation_client_data: typing.Optional[ConversationInitiationClientDataRequestInput] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TwilioOutboundCallResponse:
        """
        Handle an outbound call via Twilio

        Parameters
        ----------
        agent_id : str

        agent_phone_number_id : str

        to_number : str

        conversation_initiation_client_data : typing.Optional[ConversationInitiationClientDataRequestInput]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TwilioOutboundCallResponse
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.twilio_outbound_call(agent_id='agent_id', agent_phone_number_id='agent_phone_number_id', to_number='to_number', )
        asyncio.run(main())
        """
        _response = await self._raw_client.twilio_outbound_call(
            agent_id=agent_id,
            agent_phone_number_id=agent_phone_number_id,
            to_number=to_number,
            conversation_initiation_client_data=conversation_initiation_client_data,
            request_options=request_options,
        )
        return _response.data

    async def create_agent(
        self,
        *,
        conversation_config: ConversationalConfigApiModelInput,
        platform_settings: typing.Optional[AgentPlatformSettingsRequestModel] = OMIT,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateAgentResponseModel:
        """
        Create an agent from a config object

        Parameters
        ----------
        conversation_config : ConversationalConfigApiModelInput
            Conversation configuration for an agent

        platform_settings : typing.Optional[AgentPlatformSettingsRequestModel]
            Platform settings for the agent are all settings that aren't related to the conversation orchestration and content.

        name : typing.Optional[str]
            A name to make the agent easier to find

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateAgentResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        from elevenlabs import ConversationalConfigApiModelInput
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.create_agent(conversation_config=ConversationalConfigApiModelInput(), )
        asyncio.run(main())
        """
        _response = await self._raw_client.create_agent(
            conversation_config=conversation_config,
            platform_settings=platform_settings,
            name=name,
            request_options=request_options,
        )
        return _response.data

    async def get_agent(
        self, agent_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAgentResponseModel:
        """
        Retrieve config for an agent

        Parameters
        ----------
        agent_id : str
            The id of an agent. This is returned on agent creation.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAgentResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.get_agent(agent_id='21m00Tcm4TlvDq8ikWAM', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_agent(agent_id, request_options=request_options)
        return _response.data

    async def delete_agent(self, agent_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete an agent

        Parameters
        ----------
        agent_id : str
            The id of an agent. This is returned on agent creation.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.delete_agent(agent_id='21m00Tcm4TlvDq8ikWAM', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete_agent(agent_id, request_options=request_options)
        return _response.data

    async def update_agent(
        self,
        agent_id: str,
        *,
        conversation_config: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        platform_settings: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAgentResponseModel:
        """
        Patches an Agent settings

        Parameters
        ----------
        agent_id : str
            The id of an agent. This is returned on agent creation.

        conversation_config : typing.Optional[typing.Optional[typing.Any]]

        platform_settings : typing.Optional[typing.Optional[typing.Any]]

        name : typing.Optional[str]
            A name to make the agent easier to find

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAgentResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.update_agent(agent_id='21m00Tcm4TlvDq8ikWAM', )
        asyncio.run(main())
        """
        _response = await self._raw_client.update_agent(
            agent_id,
            conversation_config=conversation_config,
            platform_settings=platform_settings,
            name=name,
            request_options=request_options,
        )
        return _response.data

    async def get_agent_widget(
        self,
        agent_id: str,
        *,
        conversation_signature: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAgentEmbedResponseModel:
        """
        Retrieve the widget configuration for an agent

        Parameters
        ----------
        agent_id : str
            The id of an agent. This is returned on agent creation.

        conversation_signature : typing.Optional[str]
            An expiring token that enables a conversation to start. These can be generated for an agent using the /v1/convai/conversation/get_signed_url endpoint

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAgentEmbedResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.get_agent_widget(agent_id='21m00Tcm4TlvDq8ikWAM', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_agent_widget(
            agent_id, conversation_signature=conversation_signature, request_options=request_options
        )
        return _response.data

    async def get_agent_link(
        self, agent_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAgentLinkResponseModel:
        """
        Get the current link used to share the agent with others

        Parameters
        ----------
        agent_id : str
            The id of an agent. This is returned on agent creation.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAgentLinkResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.get_agent_link(agent_id='21m00Tcm4TlvDq8ikWAM', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_agent_link(agent_id, request_options=request_options)
        return _response.data

    async def post_agent_avatar(
        self, agent_id: str, *, avatar_file: core.File, request_options: typing.Optional[RequestOptions] = None
    ) -> PostAgentAvatarResponseModel:
        """
        Sets the avatar for an agent displayed in the widget

        Parameters
        ----------
        agent_id : str
            The id of an agent. This is returned on agent creation.

        avatar_file : core.File
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostAgentAvatarResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.post_agent_avatar(agent_id='21m00Tcm4TlvDq8ikWAM', )
        asyncio.run(main())
        """
        _response = await self._raw_client.post_agent_avatar(
            agent_id, avatar_file=avatar_file, request_options=request_options
        )
        return _response.data

    async def get_agents(
        self,
        *,
        cursor: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        search: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAgentsPageResponseModel:
        """
        Returns a list of your agents and their metadata.

        Parameters
        ----------
        cursor : typing.Optional[str]
            Used for fetching next page. Cursor is returned in the response.

        page_size : typing.Optional[int]
            How many Agents to return at maximum. Can not exceed 100, defaults to 30.

        search : typing.Optional[str]
            Search by agents name.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAgentsPageResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.get_agents()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_agents(
            cursor=cursor, page_size=page_size, search=search, request_options=request_options
        )
        return _response.data

    async def get_conversations(
        self,
        *,
        cursor: typing.Optional[str] = None,
        agent_id: typing.Optional[str] = None,
        call_successful: typing.Optional[EvaluationSuccessResult] = None,
        call_start_before_unix: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetConversationsPageResponseModel:
        """
        Get all conversations of agents that user owns. With option to restrict to a specific agent.

        Parameters
        ----------
        cursor : typing.Optional[str]
            Used for fetching next page. Cursor is returned in the response.

        agent_id : typing.Optional[str]
            The id of the agent you're taking the action on.

        call_successful : typing.Optional[EvaluationSuccessResult]
            The result of the success evaluation

        call_start_before_unix : typing.Optional[int]
            Unix timestamp (in seconds) to filter conversations up to this start date.

        page_size : typing.Optional[int]
            How many conversations to return at maximum. Can not exceed 100, defaults to 30.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConversationsPageResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.get_conversations()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_conversations(
            cursor=cursor,
            agent_id=agent_id,
            call_successful=call_successful,
            call_start_before_unix=call_start_before_unix,
            page_size=page_size,
            request_options=request_options,
        )
        return _response.data

    async def get_conversation(
        self, conversation_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetConversationResponseModel:
        """
        Get the details of a particular conversation

        Parameters
        ----------
        conversation_id : str
            The id of the conversation you're taking the action on.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConversationResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.get_conversation(conversation_id='123', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_conversation(conversation_id, request_options=request_options)
        return _response.data

    async def delete_conversation(
        self, conversation_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Delete a particular conversation

        Parameters
        ----------
        conversation_id : str
            The id of the conversation you're taking the action on.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.delete_conversation(conversation_id='21m00Tcm4TlvDq8ikWAM', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete_conversation(conversation_id, request_options=request_options)
        return _response.data

    async def get_conversation_audio(
        self, conversation_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.AsyncIterator[bytes]:
        """
        Get the audio recording of a particular conversation

        Parameters
        ----------
        conversation_id : str
            The id of the conversation you're taking the action on.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Returns
        -------
        typing.AsyncIterator[bytes]
            Successful Response
        """
        async with self._raw_client.get_conversation_audio(conversation_id, request_options=request_options) as r:
            async for data in r.data:
                yield data

    async def post_conversation_feedback(
        self,
        conversation_id: str,
        *,
        feedback: UserFeedbackScore,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Send the feedback for the given conversation

        Parameters
        ----------
        conversation_id : str
            The id of the conversation you're taking the action on.

        feedback : UserFeedbackScore
            Either 'like' or 'dislike' to indicate the feedback for the conversation.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.post_conversation_feedback(conversation_id='21m00Tcm4TlvDq8ikWAM', feedback="like", )
        asyncio.run(main())
        """
        _response = await self._raw_client.post_conversation_feedback(
            conversation_id, feedback=feedback, request_options=request_options
        )
        return _response.data

    async def create_phone_number(
        self,
        *,
        request: ConversationalAiCreatePhoneNumberRequestBody,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreatePhoneNumberResponseModel:
        """
        Import Phone Number from provider configuration (Twilio or SIP trunk)

        Parameters
        ----------
        request : ConversationalAiCreatePhoneNumberRequestBody

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreatePhoneNumberResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        from elevenlabs import CreateTwilioPhoneNumberRequest
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.create_phone_number(request=CreateTwilioPhoneNumberRequest(phone_number='phone_number', label='label', sid='sid', token='token', ), )
        asyncio.run(main())
        """
        _response = await self._raw_client.create_phone_number(request=request, request_options=request_options)
        return _response.data

    async def get_phone_number(
        self, phone_number_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetPhoneNumberResponseModel:
        """
        Retrieve Phone Number details by ID

        Parameters
        ----------
        phone_number_id : str
            The id of an agent. This is returned on agent creation.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetPhoneNumberResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.get_phone_number(phone_number_id='TeaqRRdTcIfIu2i7BYfT', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_phone_number(phone_number_id, request_options=request_options)
        return _response.data

    async def delete_phone_number(
        self, phone_number_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Delete Phone Number by ID

        Parameters
        ----------
        phone_number_id : str
            The id of an agent. This is returned on agent creation.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.delete_phone_number(phone_number_id='TeaqRRdTcIfIu2i7BYfT', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete_phone_number(phone_number_id, request_options=request_options)
        return _response.data

    async def update_phone_number(
        self,
        phone_number_id: str,
        *,
        agent_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetPhoneNumberResponseModel:
        """
        Update Phone Number details by ID

        Parameters
        ----------
        phone_number_id : str
            The id of an agent. This is returned on agent creation.

        agent_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetPhoneNumberResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.update_phone_number(phone_number_id='TeaqRRdTcIfIu2i7BYfT', )
        asyncio.run(main())
        """
        _response = await self._raw_client.update_phone_number(
            phone_number_id, agent_id=agent_id, request_options=request_options
        )
        return _response.data

    async def get_phone_numbers(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[GetPhoneNumberResponseModel]:
        """
        Retrieve all Phone Numbers

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[GetPhoneNumberResponseModel]
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.get_phone_numbers()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_phone_numbers(request_options=request_options)
        return _response.data

    async def get_knowledge_base_list(
        self,
        *,
        cursor: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        search: typing.Optional[str] = None,
        show_only_owned_documents: typing.Optional[bool] = None,
        types: typing.Optional[
            typing.Union[KnowledgeBaseDocumentType, typing.Sequence[KnowledgeBaseDocumentType]]
        ] = None,
        use_typesense: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetKnowledgeBaseListResponseModel:
        """
        Get a list of available knowledge base documents

        Parameters
        ----------
        cursor : typing.Optional[str]
            Used for fetching next page. Cursor is returned in the response.

        page_size : typing.Optional[int]
            How many documents to return at maximum. Can not exceed 100, defaults to 30.

        search : typing.Optional[str]
            If specified, the endpoint returns only such knowledge base documents whose names start with this string.

        show_only_owned_documents : typing.Optional[bool]
            If set to true, the endpoint will return only documents owned by you (and not shared from somebody else).

        types : typing.Optional[typing.Union[KnowledgeBaseDocumentType, typing.Sequence[KnowledgeBaseDocumentType]]]
            If present, the endpoint will return only documents of the given types.

        use_typesense : typing.Optional[bool]
            If set to true, the endpoint will use typesense DB to search for the documents).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetKnowledgeBaseListResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.get_knowledge_base_list()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_knowledge_base_list(
            cursor=cursor,
            page_size=page_size,
            search=search,
            show_only_owned_documents=show_only_owned_documents,
            types=types,
            use_typesense=use_typesense,
            request_options=request_options,
        )
        return _response.data

    async def add_to_knowledge_base(
        self,
        *,
        name: typing.Optional[str] = OMIT,
        url: typing.Optional[str] = OMIT,
        file: typing.Optional[core.File] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AddKnowledgeBaseResponseModel:
        """
        Upload a file or webpage URL to create a knowledge base document. <br> <Note> After creating the document, update the agent's knowledge base by calling [Update agent](/docs/conversational-ai/api-reference/agents/update-agent). </Note>

        Parameters
        ----------
        name : typing.Optional[str]
            A custom, human-readable name for the document.

        url : typing.Optional[str]
            URL to a page of documentation that the agent will have access to in order to interact with users.

        file : typing.Optional[core.File]
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AddKnowledgeBaseResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.add_to_knowledge_base()
        asyncio.run(main())
        """
        _response = await self._raw_client.add_to_knowledge_base(
            name=name, url=url, file=file, request_options=request_options
        )
        return _response.data

    async def create_knowledge_base_url_document(
        self, *, url: str, name: typing.Optional[str] = OMIT, request_options: typing.Optional[RequestOptions] = None
    ) -> AddKnowledgeBaseResponseModel:
        """
        Create a knowledge base document generated by scraping the given webpage.

        Parameters
        ----------
        url : str
            URL to a page of documentation that the agent will have access to in order to interact with users.

        name : typing.Optional[str]
            A custom, human-readable name for the document.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AddKnowledgeBaseResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.create_knowledge_base_url_document(url='url', )
        asyncio.run(main())
        """
        _response = await self._raw_client.create_knowledge_base_url_document(
            url=url, name=name, request_options=request_options
        )
        return _response.data

    async def create_knowledge_base_file_document(
        self,
        *,
        file: core.File,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AddKnowledgeBaseResponseModel:
        """
        Create a knowledge base document generated form the uploaded file.

        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        name : typing.Optional[str]
            A custom, human-readable name for the document.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AddKnowledgeBaseResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.create_knowledge_base_file_document()
        asyncio.run(main())
        """
        _response = await self._raw_client.create_knowledge_base_file_document(
            file=file, name=name, request_options=request_options
        )
        return _response.data

    async def create_knowledge_base_text_document(
        self, *, text: str, name: typing.Optional[str] = OMIT, request_options: typing.Optional[RequestOptions] = None
    ) -> AddKnowledgeBaseResponseModel:
        """
        Create a knowledge base document containing the provided text.

        Parameters
        ----------
        text : str
            Text content to be added to the knowledge base.

        name : typing.Optional[str]
            A custom, human-readable name for the document.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AddKnowledgeBaseResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.create_knowledge_base_text_document(text='text', )
        asyncio.run(main())
        """
        _response = await self._raw_client.create_knowledge_base_text_document(
            text=text, name=name, request_options=request_options
        )
        return _response.data

    async def rag_index_status(
        self,
        documentation_id: str,
        *,
        model: EmbeddingModelEnum,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> RagIndexResponseModel:
        """
        In case the document is not RAG indexed, it triggers rag indexing task, otherwise it just returns the current status.

        Parameters
        ----------
        documentation_id : str
            The id of a document from the knowledge base. This is returned on document addition.

        model : EmbeddingModelEnum

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RagIndexResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.rag_index_status(documentation_id='21m00Tcm4TlvDq8ikWAM', model="e5_mistral_7b_instruct", )
        asyncio.run(main())
        """
        _response = await self._raw_client.rag_index_status(
            documentation_id, model=model, request_options=request_options
        )
        return _response.data

    async def get_knowledge_base_document_by_id(
        self, documentation_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ConversationalAiGetKnowledgeBaseDocumentByIdResponse:
        """
        Get details about a specific documentation making up the agent's knowledge base

        Parameters
        ----------
        documentation_id : str
            The id of a document from the knowledge base. This is returned on document addition.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConversationalAiGetKnowledgeBaseDocumentByIdResponse
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.get_knowledge_base_document_by_id(documentation_id='21m00Tcm4TlvDq8ikWAM', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_knowledge_base_document_by_id(
            documentation_id, request_options=request_options
        )
        return _response.data

    async def delete_knowledge_base_document(
        self, documentation_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Delete a document from the knowledge base

        Parameters
        ----------
        documentation_id : str
            The id of a document from the knowledge base. This is returned on document addition.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.delete_knowledge_base_document(documentation_id='21m00Tcm4TlvDq8ikWAM', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete_knowledge_base_document(
            documentation_id, request_options=request_options
        )
        return _response.data

    async def get_dependent_agents(
        self,
        documentation_id: str,
        *,
        cursor: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetKnowledgeBaseDependentAgentsResponseModel:
        """
        Get a list of agents depending on this knowledge base document

        Parameters
        ----------
        documentation_id : str
            The id of a document from the knowledge base. This is returned on document addition.

        cursor : typing.Optional[str]
            Used for fetching next page. Cursor is returned in the response.

        page_size : typing.Optional[int]
            How many documents to return at maximum. Can not exceed 100, defaults to 30.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetKnowledgeBaseDependentAgentsResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.get_dependent_agents(documentation_id='21m00Tcm4TlvDq8ikWAM', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_dependent_agents(
            documentation_id, cursor=cursor, page_size=page_size, request_options=request_options
        )
        return _response.data

    async def get_knowledge_base_document_content(
        self, documentation_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Get the entire content of a document from the knowledge base

        Parameters
        ----------
        documentation_id : str
            The id of a document from the knowledge base. This is returned on document addition.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.get_knowledge_base_document_content(documentation_id='21m00Tcm4TlvDq8ikWAM', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_knowledge_base_document_content(
            documentation_id, request_options=request_options
        )
        return _response.data

    async def get_knowledge_base_document_part_by_id(
        self, documentation_id: str, chunk_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> KnowledgeBaseDocumentChunkResponseModel:
        """
        Get details about a specific documentation part used by RAG.

        Parameters
        ----------
        documentation_id : str
            The id of a document from the knowledge base. This is returned on document addition.

        chunk_id : str
            The id of a document RAG chunk from the knowledge base.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        KnowledgeBaseDocumentChunkResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.get_knowledge_base_document_part_by_id(documentation_id='21m00Tcm4TlvDq8ikWAM', chunk_id='chunk_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_knowledge_base_document_part_by_id(
            documentation_id, chunk_id, request_options=request_options
        )
        return _response.data

    async def get_settings(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetConvAiSettingsResponseModel:
        """
        Retrieve Convai settings for the workspace

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConvAiSettingsResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.get_settings()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_settings(request_options=request_options)
        return _response.data

    async def update_settings(
        self,
        *,
        conversation_initiation_client_data_webhook: typing.Optional[ConversationInitiationClientDataWebhook] = OMIT,
        webhooks: typing.Optional[ConvAiWebhooks] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetConvAiSettingsResponseModel:
        """
        Update Convai settings for the workspace

        Parameters
        ----------
        conversation_initiation_client_data_webhook : typing.Optional[ConversationInitiationClientDataWebhook]

        webhooks : typing.Optional[ConvAiWebhooks]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConvAiSettingsResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.update_settings()
        asyncio.run(main())
        """
        _response = await self._raw_client.update_settings(
            conversation_initiation_client_data_webhook=conversation_initiation_client_data_webhook,
            webhooks=webhooks,
            request_options=request_options,
        )
        return _response.data

    async def get_dashboard_settings(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetConvAiDashboardSettingsResponseModel:
        """
        Retrieve Convai dashboard settings for the workspace

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConvAiDashboardSettingsResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.get_dashboard_settings()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_dashboard_settings(request_options=request_options)
        return _response.data

    async def update_dashboard_settings(
        self,
        *,
        charts: typing.Optional[typing.Sequence[PatchConvAiDashboardSettingsRequestChartsItem]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetConvAiDashboardSettingsResponseModel:
        """
        Update Convai dashboard settings for the workspace

        Parameters
        ----------
        charts : typing.Optional[typing.Sequence[PatchConvAiDashboardSettingsRequestChartsItem]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConvAiDashboardSettingsResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.update_dashboard_settings()
        asyncio.run(main())
        """
        _response = await self._raw_client.update_dashboard_settings(charts=charts, request_options=request_options)
        return _response.data

    async def get_secrets(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetWorkspaceSecretsResponseModel:
        """
        Get all workspace secrets for the user

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetWorkspaceSecretsResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.get_secrets()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_secrets(request_options=request_options)
        return _response.data

    async def create_secret(
        self, *, name: str, value: str, request_options: typing.Optional[RequestOptions] = None
    ) -> PostWorkspaceSecretResponseModel:
        """
        Create a new secret for the workspace

        Parameters
        ----------
        name : str

        value : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostWorkspaceSecretResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.create_secret(name='name', value='value', )
        asyncio.run(main())
        """
        _response = await self._raw_client.create_secret(name=name, value=value, request_options=request_options)
        return _response.data

    async def delete_secret(self, secret_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a workspace secret if it's not in use

        Parameters
        ----------
        secret_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.conversational_ai.delete_secret(secret_id='secret_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete_secret(secret_id, request_options=request_options)
        return _response.data
