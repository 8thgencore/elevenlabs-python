# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.reader_publisher_profile_response_model import ReaderPublisherProfileResponseModel
from ..core.jsonable_encoder import jsonable_encoder
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from .. import core
from ..types.get_reader_publisher_profiles_response import GetReaderPublisherProfilesResponse
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ReaderPublisherProfilesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_a_publisher_profile_by_id(
        self, publisher_profile_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ReaderPublisherProfileResponseModel:
        """
        Parameters
        ----------
        publisher_profile_id : str
            The ID of the publisher profile to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReaderPublisherProfileResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs

        client = ElevenLabs(
            api_key="YOUR_API_KEY",
        )
        client.reader_publisher_profiles.get_a_publisher_profile_by_id(
            publisher_profile_id="publisher_profile_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/publisher-profiles/{jsonable_encoder(publisher_profile_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ReaderPublisherProfileResponseModel,
                    construct_type(
                        type_=ReaderPublisherProfileResponseModel,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_a_publisher_profile(
        self,
        publisher_profile_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        bio: typing.Optional[str] = OMIT,
        image: typing.Optional[core.File] = OMIT,
        date_of_birth: typing.Optional[str] = OMIT,
        origin: typing.Optional[str] = OMIT,
        website_link: typing.Optional[str] = OMIT,
        social_links: typing.Optional[str] = OMIT,
        pen_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReaderPublisherProfileResponseModel:
        """
        Parameters
        ----------
        publisher_profile_id : str
            The ID of the publisher profile to update

        name : typing.Optional[str]
            The name of the publisher profile

        bio : typing.Optional[str]
            The bio of the publisher profile

        image : typing.Optional[core.File]
            See core.File for more documentation

        date_of_birth : typing.Optional[str]
            The date of birth of the publisher profile

        origin : typing.Optional[str]
            The origin of the publisher profile

        website_link : typing.Optional[str]
            The website link of the publisher profile

        social_links : typing.Optional[str]
            The social links of the publisher profile

        pen_name : typing.Optional[str]
            The pen name of the publisher profile

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReaderPublisherProfileResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs

        client = ElevenLabs(
            api_key="YOUR_API_KEY",
        )
        client.reader_publisher_profiles.update_a_publisher_profile(
            publisher_profile_id="publisher_profile_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/publisher-profiles/{jsonable_encoder(publisher_profile_id)}",
            method="POST",
            data={
                "name": name,
                "bio": bio,
                "date_of_birth": date_of_birth,
                "origin": origin,
                "website_link": website_link,
                "social_links": social_links,
                "pen_name": pen_name,
            },
            files={
                "image": image,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ReaderPublisherProfileResponseModel,
                    construct_type(
                        type_=ReaderPublisherProfileResponseModel,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_all_publisher_profiles_by_the_workspace(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetReaderPublisherProfilesResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetReaderPublisherProfilesResponse
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs

        client = ElevenLabs(
            api_key="YOUR_API_KEY",
        )
        client.reader_publisher_profiles.get_all_publisher_profiles_by_the_workspace()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/publisher-profiles",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetReaderPublisherProfilesResponse,
                    construct_type(
                        type_=GetReaderPublisherProfilesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_an_publisher_profile(
        self,
        *,
        name: str,
        bio: typing.Optional[str] = OMIT,
        image: typing.Optional[core.File] = OMIT,
        date_of_birth: typing.Optional[str] = OMIT,
        origin: typing.Optional[str] = OMIT,
        website_link: typing.Optional[str] = OMIT,
        social_links: typing.Optional[str] = OMIT,
        pen_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReaderPublisherProfileResponseModel:
        """
        Parameters
        ----------
        name : str
            The name of the publisher profile

        bio : typing.Optional[str]
            The bio of the publisher profile

        image : typing.Optional[core.File]
            See core.File for more documentation

        date_of_birth : typing.Optional[str]
            The date of birth of the publisher profile

        origin : typing.Optional[str]
            The origin of the publisher profile

        website_link : typing.Optional[str]
            The website link of the publisher profile

        social_links : typing.Optional[str]
            The social links of the publisher profile

        pen_name : typing.Optional[str]
            The pen name of the publisher profile

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReaderPublisherProfileResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs

        client = ElevenLabs(
            api_key="YOUR_API_KEY",
        )
        client.reader_publisher_profiles.create_an_publisher_profile(
            name="name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/publisher-profiles",
            method="POST",
            data={
                "name": name,
                "bio": bio,
                "date_of_birth": date_of_birth,
                "origin": origin,
                "website_link": website_link,
                "social_links": social_links,
                "pen_name": pen_name,
            },
            files={
                "image": image,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ReaderPublisherProfileResponseModel,
                    construct_type(
                        type_=ReaderPublisherProfileResponseModel,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_a_publisher_profile_by_read_id(
        self, read_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ReaderPublisherProfileResponseModel:
        """
        Parameters
        ----------
        read_id : str
            Read ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReaderPublisherProfileResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs

        client = ElevenLabs(
            api_key="YOUR_API_KEY",
        )
        client.reader_publisher_profiles.get_a_publisher_profile_by_read_id(
            read_id="read_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/publisher-profiles/read/{jsonable_encoder(read_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ReaderPublisherProfileResponseModel,
                    construct_type(
                        type_=ReaderPublisherProfileResponseModel,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncReaderPublisherProfilesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_a_publisher_profile_by_id(
        self, publisher_profile_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ReaderPublisherProfileResponseModel:
        """
        Parameters
        ----------
        publisher_profile_id : str
            The ID of the publisher profile to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReaderPublisherProfileResponseModel
            Successful Response

        Examples
        --------
        import asyncio

        from elevenlabs import AsyncElevenLabs

        client = AsyncElevenLabs(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.reader_publisher_profiles.get_a_publisher_profile_by_id(
                publisher_profile_id="publisher_profile_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/publisher-profiles/{jsonable_encoder(publisher_profile_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ReaderPublisherProfileResponseModel,
                    construct_type(
                        type_=ReaderPublisherProfileResponseModel,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_a_publisher_profile(
        self,
        publisher_profile_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        bio: typing.Optional[str] = OMIT,
        image: typing.Optional[core.File] = OMIT,
        date_of_birth: typing.Optional[str] = OMIT,
        origin: typing.Optional[str] = OMIT,
        website_link: typing.Optional[str] = OMIT,
        social_links: typing.Optional[str] = OMIT,
        pen_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReaderPublisherProfileResponseModel:
        """
        Parameters
        ----------
        publisher_profile_id : str
            The ID of the publisher profile to update

        name : typing.Optional[str]
            The name of the publisher profile

        bio : typing.Optional[str]
            The bio of the publisher profile

        image : typing.Optional[core.File]
            See core.File for more documentation

        date_of_birth : typing.Optional[str]
            The date of birth of the publisher profile

        origin : typing.Optional[str]
            The origin of the publisher profile

        website_link : typing.Optional[str]
            The website link of the publisher profile

        social_links : typing.Optional[str]
            The social links of the publisher profile

        pen_name : typing.Optional[str]
            The pen name of the publisher profile

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReaderPublisherProfileResponseModel
            Successful Response

        Examples
        --------
        import asyncio

        from elevenlabs import AsyncElevenLabs

        client = AsyncElevenLabs(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.reader_publisher_profiles.update_a_publisher_profile(
                publisher_profile_id="publisher_profile_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/publisher-profiles/{jsonable_encoder(publisher_profile_id)}",
            method="POST",
            data={
                "name": name,
                "bio": bio,
                "date_of_birth": date_of_birth,
                "origin": origin,
                "website_link": website_link,
                "social_links": social_links,
                "pen_name": pen_name,
            },
            files={
                "image": image,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ReaderPublisherProfileResponseModel,
                    construct_type(
                        type_=ReaderPublisherProfileResponseModel,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_all_publisher_profiles_by_the_workspace(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetReaderPublisherProfilesResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetReaderPublisherProfilesResponse
            Successful Response

        Examples
        --------
        import asyncio

        from elevenlabs import AsyncElevenLabs

        client = AsyncElevenLabs(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.reader_publisher_profiles.get_all_publisher_profiles_by_the_workspace()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/publisher-profiles",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetReaderPublisherProfilesResponse,
                    construct_type(
                        type_=GetReaderPublisherProfilesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_an_publisher_profile(
        self,
        *,
        name: str,
        bio: typing.Optional[str] = OMIT,
        image: typing.Optional[core.File] = OMIT,
        date_of_birth: typing.Optional[str] = OMIT,
        origin: typing.Optional[str] = OMIT,
        website_link: typing.Optional[str] = OMIT,
        social_links: typing.Optional[str] = OMIT,
        pen_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReaderPublisherProfileResponseModel:
        """
        Parameters
        ----------
        name : str
            The name of the publisher profile

        bio : typing.Optional[str]
            The bio of the publisher profile

        image : typing.Optional[core.File]
            See core.File for more documentation

        date_of_birth : typing.Optional[str]
            The date of birth of the publisher profile

        origin : typing.Optional[str]
            The origin of the publisher profile

        website_link : typing.Optional[str]
            The website link of the publisher profile

        social_links : typing.Optional[str]
            The social links of the publisher profile

        pen_name : typing.Optional[str]
            The pen name of the publisher profile

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReaderPublisherProfileResponseModel
            Successful Response

        Examples
        --------
        import asyncio

        from elevenlabs import AsyncElevenLabs

        client = AsyncElevenLabs(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.reader_publisher_profiles.create_an_publisher_profile(
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/publisher-profiles",
            method="POST",
            data={
                "name": name,
                "bio": bio,
                "date_of_birth": date_of_birth,
                "origin": origin,
                "website_link": website_link,
                "social_links": social_links,
                "pen_name": pen_name,
            },
            files={
                "image": image,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ReaderPublisherProfileResponseModel,
                    construct_type(
                        type_=ReaderPublisherProfileResponseModel,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_a_publisher_profile_by_read_id(
        self, read_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ReaderPublisherProfileResponseModel:
        """
        Parameters
        ----------
        read_id : str
            Read ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReaderPublisherProfileResponseModel
            Successful Response

        Examples
        --------
        import asyncio

        from elevenlabs import AsyncElevenLabs

        client = AsyncElevenLabs(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.reader_publisher_profiles.get_a_publisher_profile_by_read_id(
                read_id="read_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/publisher-profiles/read/{jsonable_encoder(read_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ReaderPublisherProfileResponseModel,
                    construct_type(
                        type_=ReaderPublisherProfileResponseModel,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
