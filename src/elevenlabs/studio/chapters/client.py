# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...types.add_chapter_response_model import AddChapterResponseModel
from ...types.chapter_content_input_model import ChapterContentInputModel
from ...types.chapter_snapshot_extended_response_model import ChapterSnapshotExtendedResponseModel
from ...types.chapter_snapshots_response_model import ChapterSnapshotsResponseModel
from ...types.chapter_with_content_response_model import ChapterWithContentResponseModel
from ...types.convert_chapter_response_model import ConvertChapterResponseModel
from ...types.delete_chapter_response_model import DeleteChapterResponseModel
from ...types.edit_chapter_response_model import EditChapterResponseModel
from ...types.get_chapters_response_model import GetChaptersResponseModel
from .raw_client import AsyncRawChaptersClient, RawChaptersClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ChaptersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawChaptersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawChaptersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawChaptersClient
        """
        return self._raw_client

    def get_all(
        self, project_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetChaptersResponseModel:
        """
        Returns a list of a Studio project's chapters.

        Parameters
        ----------
        project_id : str
            The ID of the Studio project.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetChaptersResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.studio.chapters.get_all(project_id='21m00Tcm4TlvDq8ikWAM', )
        """
        _response = self._raw_client.get_all(project_id, request_options=request_options)
        return _response.data

    def create(
        self,
        project_id: str,
        *,
        name: str,
        from_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AddChapterResponseModel:
        """
        Creates a new chapter either as blank or from a URL.

        Parameters
        ----------
        project_id : str
            The ID of the Studio project.

        name : str
            The name of the chapter, used for identification only.

        from_url : typing.Optional[str]
            An optional URL from which we will extract content to initialize the Studio project. If this is set, 'from_url' must be null. If neither 'from_url' or 'from_document' are provided we will initialize the Studio project as blank.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AddChapterResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.studio.chapters.create(project_id='21m00Tcm4TlvDq8ikWAM', name='Chapter 1', )
        """
        _response = self._raw_client.create(project_id, name=name, from_url=from_url, request_options=request_options)
        return _response.data

    def get(
        self, project_id: str, chapter_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ChapterWithContentResponseModel:
        """
        Returns information about a specific chapter.

        Parameters
        ----------
        project_id : str
            The ID of the project to be used. You can use the [List projects](/docs/api-reference/studio/get-projects) endpoint to list all the available projects.

        chapter_id : str
            The ID of the chapter to be used. You can use the [List project chapters](/docs/api-reference/studio/get-chapters) endpoint to list all the available chapters.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ChapterWithContentResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.studio.chapters.get(project_id='21m00Tcm4TlvDq8ikWAM', chapter_id='21m00Tcm4TlvDq8ikWAM', )
        """
        _response = self._raw_client.get(project_id, chapter_id, request_options=request_options)
        return _response.data

    def edit(
        self,
        project_id: str,
        chapter_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        content: typing.Optional[ChapterContentInputModel] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EditChapterResponseModel:
        """
        Updates a chapter.

        Parameters
        ----------
        project_id : str
            The ID of the project to be used. You can use the [List projects](/docs/api-reference/studio/get-projects) endpoint to list all the available projects.

        chapter_id : str
            The ID of the chapter to be used. You can use the [List project chapters](/docs/api-reference/studio/get-chapters) endpoint to list all the available chapters.

        name : typing.Optional[str]
            The name of the chapter, used for identification only.

        content : typing.Optional[ChapterContentInputModel]
            The chapter content to use.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EditChapterResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.studio.chapters.edit(project_id='21m00Tcm4TlvDq8ikWAM', chapter_id='21m00Tcm4TlvDq8ikWAM', )
        """
        _response = self._raw_client.edit(
            project_id, chapter_id, name=name, content=content, request_options=request_options
        )
        return _response.data

    def delete(
        self, project_id: str, chapter_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteChapterResponseModel:
        """
        Deletes a chapter.

        Parameters
        ----------
        project_id : str
            The ID of the project to be used. You can use the [List projects](/docs/api-reference/studio/get-projects) endpoint to list all the available projects.

        chapter_id : str
            The ID of the chapter to be used. You can use the [List project chapters](/docs/api-reference/studio/get-chapters) endpoint to list all the available chapters.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteChapterResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.studio.chapters.delete(project_id='21m00Tcm4TlvDq8ikWAM', chapter_id='21m00Tcm4TlvDq8ikWAM', )
        """
        _response = self._raw_client.delete(project_id, chapter_id, request_options=request_options)
        return _response.data

    def convert(
        self, project_id: str, chapter_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ConvertChapterResponseModel:
        """
        Starts conversion of a specific chapter.

        Parameters
        ----------
        project_id : str
            The ID of the project to be used. You can use the [List projects](/docs/api-reference/studio/get-projects) endpoint to list all the available projects.

        chapter_id : str
            The ID of the chapter to be used. You can use the [List project chapters](/docs/api-reference/studio/get-chapters) endpoint to list all the available chapters.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConvertChapterResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.studio.chapters.convert(project_id='21m00Tcm4TlvDq8ikWAM', chapter_id='21m00Tcm4TlvDq8ikWAM', )
        """
        _response = self._raw_client.convert(project_id, chapter_id, request_options=request_options)
        return _response.data

    def get_all_snapshots(
        self, project_id: str, chapter_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ChapterSnapshotsResponseModel:
        """
        Gets information about all the snapshots of a chapter. Each snapshot can be downloaded as audio. Whenever a chapter is converted a snapshot will automatically be created.

        Parameters
        ----------
        project_id : str
            The ID of the project to be used. You can use the [List projects](/docs/api-reference/studio/get-projects) endpoint to list all the available projects.

        chapter_id : str
            The ID of the chapter to be used. You can use the [List project chapters](/docs/api-reference/studio/get-chapters) endpoint to list all the available chapters.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ChapterSnapshotsResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.studio.chapters.get_all_snapshots(project_id='21m00Tcm4TlvDq8ikWAM', chapter_id='21m00Tcm4TlvDq8ikWAM', )
        """
        _response = self._raw_client.get_all_snapshots(project_id, chapter_id, request_options=request_options)
        return _response.data

    def get_chapter_snapshot(
        self,
        project_id: str,
        chapter_id: str,
        chapter_snapshot_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ChapterSnapshotExtendedResponseModel:
        """
        Returns the chapter snapshot.

        Parameters
        ----------
        project_id : str
            The ID of the Studio project.

        chapter_id : str
            The ID of the chapter.

        chapter_snapshot_id : str
            The ID of the chapter snapshot.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ChapterSnapshotExtendedResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.studio.chapters.get_chapter_snapshot(project_id='21m00Tcm4TlvDq8ikWAM', chapter_id='21m00Tcm4TlvDq8ikWAM', chapter_snapshot_id='21m00Tcm4TlvDq8ikWAM', )
        """
        _response = self._raw_client.get_chapter_snapshot(
            project_id, chapter_id, chapter_snapshot_id, request_options=request_options
        )
        return _response.data

    def stream_snapshot(
        self,
        project_id: str,
        chapter_id: str,
        chapter_snapshot_id: str,
        *,
        convert_to_mpeg: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Iterator[bytes]:
        """
        Stream the audio from a chapter snapshot. Use `GET /v1/studio/projects/{project_id}/chapters/{chapter_id}/snapshots` to return the snapshots of a chapter.

        Parameters
        ----------
        project_id : str
            The ID of the project to be used. You can use the [List projects](/docs/api-reference/studio/get-projects) endpoint to list all the available projects.

        chapter_id : str
            The ID of the chapter to be used. You can use the [List project chapters](/docs/api-reference/studio/get-chapters) endpoint to list all the available chapters.

        chapter_snapshot_id : str
            The ID of the chapter snapshot to be used. You can use the [List project chapter snapshots](/docs/api-reference/studio/get-snapshots) endpoint to list all the available snapshots.

        convert_to_mpeg : typing.Optional[bool]
            Whether to convert the audio to mpeg format.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Returns
        -------
        typing.Iterator[bytes]
            Streaming audio data
        """
        with self._raw_client.stream_snapshot(
            project_id,
            chapter_id,
            chapter_snapshot_id,
            convert_to_mpeg=convert_to_mpeg,
            request_options=request_options,
        ) as r:
            yield from r.data


class AsyncChaptersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawChaptersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawChaptersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawChaptersClient
        """
        return self._raw_client

    async def get_all(
        self, project_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetChaptersResponseModel:
        """
        Returns a list of a Studio project's chapters.

        Parameters
        ----------
        project_id : str
            The ID of the Studio project.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetChaptersResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.studio.chapters.get_all(project_id='21m00Tcm4TlvDq8ikWAM', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_all(project_id, request_options=request_options)
        return _response.data

    async def create(
        self,
        project_id: str,
        *,
        name: str,
        from_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AddChapterResponseModel:
        """
        Creates a new chapter either as blank or from a URL.

        Parameters
        ----------
        project_id : str
            The ID of the Studio project.

        name : str
            The name of the chapter, used for identification only.

        from_url : typing.Optional[str]
            An optional URL from which we will extract content to initialize the Studio project. If this is set, 'from_url' must be null. If neither 'from_url' or 'from_document' are provided we will initialize the Studio project as blank.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AddChapterResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.studio.chapters.create(project_id='21m00Tcm4TlvDq8ikWAM', name='Chapter 1', )
        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            project_id, name=name, from_url=from_url, request_options=request_options
        )
        return _response.data

    async def get(
        self, project_id: str, chapter_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ChapterWithContentResponseModel:
        """
        Returns information about a specific chapter.

        Parameters
        ----------
        project_id : str
            The ID of the project to be used. You can use the [List projects](/docs/api-reference/studio/get-projects) endpoint to list all the available projects.

        chapter_id : str
            The ID of the chapter to be used. You can use the [List project chapters](/docs/api-reference/studio/get-chapters) endpoint to list all the available chapters.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ChapterWithContentResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.studio.chapters.get(project_id='21m00Tcm4TlvDq8ikWAM', chapter_id='21m00Tcm4TlvDq8ikWAM', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get(project_id, chapter_id, request_options=request_options)
        return _response.data

    async def edit(
        self,
        project_id: str,
        chapter_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        content: typing.Optional[ChapterContentInputModel] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EditChapterResponseModel:
        """
        Updates a chapter.

        Parameters
        ----------
        project_id : str
            The ID of the project to be used. You can use the [List projects](/docs/api-reference/studio/get-projects) endpoint to list all the available projects.

        chapter_id : str
            The ID of the chapter to be used. You can use the [List project chapters](/docs/api-reference/studio/get-chapters) endpoint to list all the available chapters.

        name : typing.Optional[str]
            The name of the chapter, used for identification only.

        content : typing.Optional[ChapterContentInputModel]
            The chapter content to use.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EditChapterResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.studio.chapters.edit(project_id='21m00Tcm4TlvDq8ikWAM', chapter_id='21m00Tcm4TlvDq8ikWAM', )
        asyncio.run(main())
        """
        _response = await self._raw_client.edit(
            project_id, chapter_id, name=name, content=content, request_options=request_options
        )
        return _response.data

    async def delete(
        self, project_id: str, chapter_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteChapterResponseModel:
        """
        Deletes a chapter.

        Parameters
        ----------
        project_id : str
            The ID of the project to be used. You can use the [List projects](/docs/api-reference/studio/get-projects) endpoint to list all the available projects.

        chapter_id : str
            The ID of the chapter to be used. You can use the [List project chapters](/docs/api-reference/studio/get-chapters) endpoint to list all the available chapters.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteChapterResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.studio.chapters.delete(project_id='21m00Tcm4TlvDq8ikWAM', chapter_id='21m00Tcm4TlvDq8ikWAM', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete(project_id, chapter_id, request_options=request_options)
        return _response.data

    async def convert(
        self, project_id: str, chapter_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ConvertChapterResponseModel:
        """
        Starts conversion of a specific chapter.

        Parameters
        ----------
        project_id : str
            The ID of the project to be used. You can use the [List projects](/docs/api-reference/studio/get-projects) endpoint to list all the available projects.

        chapter_id : str
            The ID of the chapter to be used. You can use the [List project chapters](/docs/api-reference/studio/get-chapters) endpoint to list all the available chapters.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConvertChapterResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.studio.chapters.convert(project_id='21m00Tcm4TlvDq8ikWAM', chapter_id='21m00Tcm4TlvDq8ikWAM', )
        asyncio.run(main())
        """
        _response = await self._raw_client.convert(project_id, chapter_id, request_options=request_options)
        return _response.data

    async def get_all_snapshots(
        self, project_id: str, chapter_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ChapterSnapshotsResponseModel:
        """
        Gets information about all the snapshots of a chapter. Each snapshot can be downloaded as audio. Whenever a chapter is converted a snapshot will automatically be created.

        Parameters
        ----------
        project_id : str
            The ID of the project to be used. You can use the [List projects](/docs/api-reference/studio/get-projects) endpoint to list all the available projects.

        chapter_id : str
            The ID of the chapter to be used. You can use the [List project chapters](/docs/api-reference/studio/get-chapters) endpoint to list all the available chapters.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ChapterSnapshotsResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.studio.chapters.get_all_snapshots(project_id='21m00Tcm4TlvDq8ikWAM', chapter_id='21m00Tcm4TlvDq8ikWAM', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_all_snapshots(project_id, chapter_id, request_options=request_options)
        return _response.data

    async def get_chapter_snapshot(
        self,
        project_id: str,
        chapter_id: str,
        chapter_snapshot_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ChapterSnapshotExtendedResponseModel:
        """
        Returns the chapter snapshot.

        Parameters
        ----------
        project_id : str
            The ID of the Studio project.

        chapter_id : str
            The ID of the chapter.

        chapter_snapshot_id : str
            The ID of the chapter snapshot.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ChapterSnapshotExtendedResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.studio.chapters.get_chapter_snapshot(project_id='21m00Tcm4TlvDq8ikWAM', chapter_id='21m00Tcm4TlvDq8ikWAM', chapter_snapshot_id='21m00Tcm4TlvDq8ikWAM', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_chapter_snapshot(
            project_id, chapter_id, chapter_snapshot_id, request_options=request_options
        )
        return _response.data

    async def stream_snapshot(
        self,
        project_id: str,
        chapter_id: str,
        chapter_snapshot_id: str,
        *,
        convert_to_mpeg: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.AsyncIterator[bytes]:
        """
        Stream the audio from a chapter snapshot. Use `GET /v1/studio/projects/{project_id}/chapters/{chapter_id}/snapshots` to return the snapshots of a chapter.

        Parameters
        ----------
        project_id : str
            The ID of the project to be used. You can use the [List projects](/docs/api-reference/studio/get-projects) endpoint to list all the available projects.

        chapter_id : str
            The ID of the chapter to be used. You can use the [List project chapters](/docs/api-reference/studio/get-chapters) endpoint to list all the available chapters.

        chapter_snapshot_id : str
            The ID of the chapter snapshot to be used. You can use the [List project chapter snapshots](/docs/api-reference/studio/get-snapshots) endpoint to list all the available snapshots.

        convert_to_mpeg : typing.Optional[bool]
            Whether to convert the audio to mpeg format.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Returns
        -------
        typing.AsyncIterator[bytes]
            Streaming audio data
        """
        async with self._raw_client.stream_snapshot(
            project_id,
            chapter_id,
            chapter_snapshot_id,
            convert_to_mpeg=convert_to_mpeg,
            request_options=request_options,
        ) as r:
            async for data in r.data:
                yield data
