# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.add_workspace_group_member_response_model import AddWorkspaceGroupMemberResponseModel
from ..types.add_workspace_invite_response_model import AddWorkspaceInviteResponseModel
from ..types.delete_workspace_group_member_response_model import DeleteWorkspaceGroupMemberResponseModel
from ..types.delete_workspace_invite_response_model import DeleteWorkspaceInviteResponseModel
from ..types.delete_workspace_member_response_model import DeleteWorkspaceMemberResponseModel
from ..types.resource_metadata_response_model import ResourceMetadataResponseModel
from ..types.update_workspace_member_response_model import UpdateWorkspaceMemberResponseModel
from ..types.workspace_group_by_name_response_model import WorkspaceGroupByNameResponseModel
from ..types.workspace_resource_type import WorkspaceResourceType
from .raw_client import AsyncRawWorkspaceClient, RawWorkspaceClient
from .types.body_share_workspace_resource_v_1_workspace_resources_resource_id_share_post_role import (
    BodyShareWorkspaceResourceV1WorkspaceResourcesResourceIdSharePostRole,
)
from .types.body_update_member_v_1_workspace_members_post_workspace_role import (
    BodyUpdateMemberV1WorkspaceMembersPostWorkspaceRole,
)

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class WorkspaceClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawWorkspaceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawWorkspaceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawWorkspaceClient
        """
        return self._raw_client

    def search_user_groups(
        self, *, name: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[WorkspaceGroupByNameResponseModel]:
        """
        Searches for user groups in the workspace. Multiple or no groups may be returned.

        Parameters
        ----------
        name : str
            Name of the target group.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[WorkspaceGroupByNameResponseModel]
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.workspace.search_user_groups(name='name', )
        """
        _response = self._raw_client.search_user_groups(name=name, request_options=request_options)
        return _response.data

    def delete_member_from_user_group(
        self, group_id: str, *, email: str, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteWorkspaceGroupMemberResponseModel:
        """
        Removes a member from the specified group. This endpoint may only be called by workspace administrators.

        Parameters
        ----------
        group_id : str
            The ID of the target group.

        email : str
            The email of the target workspace member.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteWorkspaceGroupMemberResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.workspace.delete_member_from_user_group(group_id='group_id', email='email', )
        """
        _response = self._raw_client.delete_member_from_user_group(
            group_id, email=email, request_options=request_options
        )
        return _response.data

    def add_member_to_user_group(
        self, group_id: str, *, email: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AddWorkspaceGroupMemberResponseModel:
        """
        Adds a member of your workspace to the specified group. This endpoint may only be called by workspace administrators.

        Parameters
        ----------
        group_id : str
            The ID of the target group.

        email : str
            The email of the target workspace member.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AddWorkspaceGroupMemberResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.workspace.add_member_to_user_group(group_id='group_id', email='email', )
        """
        _response = self._raw_client.add_member_to_user_group(group_id, email=email, request_options=request_options)
        return _response.data

    def invite_user(
        self,
        *,
        email: str,
        group_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AddWorkspaceInviteResponseModel:
        """
        Sends an email invitation to join your workspace to the provided email. If the user doesn't have an account they will be prompted to create one. If the user accepts this invite they will be added as a user to your workspace and your subscription using one of your seats. This endpoint may only be called by workspace administrators. If the user is already in the workspace a 400 error will be returned.

        Parameters
        ----------
        email : str
            The email of the customer

        group_ids : typing.Optional[typing.Sequence[str]]
            The group ids of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AddWorkspaceInviteResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.workspace.invite_user(email='john.doe@testmail.com', )
        """
        _response = self._raw_client.invite_user(email=email, group_ids=group_ids, request_options=request_options)
        return _response.data

    def invite_multiple_users(
        self,
        *,
        emails: typing.Sequence[str],
        group_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AddWorkspaceInviteResponseModel:
        """
        Sends email invitations to join your workspace to the provided emails. Requires all email addresses to be part of a verified domain. If the users don't have an account they will be prompted to create one. If the users accept these invites they will be added as users to your workspace and your subscription using one of your seats. This endpoint may only be called by workspace administrators.

        Parameters
        ----------
        emails : typing.Sequence[str]
            The email of the customer

        group_ids : typing.Optional[typing.Sequence[str]]
            The group ids of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AddWorkspaceInviteResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.workspace.invite_multiple_users(emails=['emails'], )
        """
        _response = self._raw_client.invite_multiple_users(
            emails=emails, group_ids=group_ids, request_options=request_options
        )
        return _response.data

    def delete_existing_invitation(
        self, *, email: str, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteWorkspaceInviteResponseModel:
        """
        Invalidates an existing email invitation. The invitation will still show up in the inbox it has been delivered to, but activating it to join the workspace won't work. This endpoint may only be called by workspace administrators.

        Parameters
        ----------
        email : str
            The email of the customer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteWorkspaceInviteResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.workspace.delete_existing_invitation(email='john.doe@testmail.com', )
        """
        _response = self._raw_client.delete_existing_invitation(email=email, request_options=request_options)
        return _response.data

    def update_member(
        self,
        *,
        email: str,
        is_locked: typing.Optional[bool] = OMIT,
        workspace_role: typing.Optional[BodyUpdateMemberV1WorkspaceMembersPostWorkspaceRole] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateWorkspaceMemberResponseModel:
        """
        Updates attributes of a workspace member. Apart from the email identifier, all parameters will remain unchanged unless specified. This endpoint may only be called by workspace administrators.

        Parameters
        ----------
        email : str
            Email of the target user.

        is_locked : typing.Optional[bool]
            Whether to lock or unlock the user account.

        workspace_role : typing.Optional[BodyUpdateMemberV1WorkspaceMembersPostWorkspaceRole]
            Role dictating permissions in the workspace.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateWorkspaceMemberResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.workspace.update_member(email='email', )
        """
        _response = self._raw_client.update_member(
            email=email, is_locked=is_locked, workspace_role=workspace_role, request_options=request_options
        )
        return _response.data

    def delete_member(
        self, *, email: str, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteWorkspaceMemberResponseModel:
        """
        Deletes a workspace member. This endpoint may only be called by workspace administrators.

        Parameters
        ----------
        email : str
            Email of the target user.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteWorkspaceMemberResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.workspace.delete_member(email='email', )
        """
        _response = self._raw_client.delete_member(email=email, request_options=request_options)
        return _response.data

    def get_resource(
        self,
        resource_id: str,
        *,
        resource_type: WorkspaceResourceType,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ResourceMetadataResponseModel:
        """
        Gets the metadata of a resource by ID.

        Parameters
        ----------
        resource_id : str
            The ID of the target resource.

        resource_type : WorkspaceResourceType
            Resource type of the target resource.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ResourceMetadataResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.workspace.get_resource(resource_id='resource_id', resource_type="voice", )
        """
        _response = self._raw_client.get_resource(
            resource_id, resource_type=resource_type, request_options=request_options
        )
        return _response.data

    def share_workspace_resource(
        self,
        resource_id: str,
        *,
        role: BodyShareWorkspaceResourceV1WorkspaceResourcesResourceIdSharePostRole,
        resource_type: WorkspaceResourceType,
        user_email: typing.Optional[str] = OMIT,
        group_id: typing.Optional[str] = OMIT,
        workspace_api_key_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Grants a role on a workspace resource to a user or a group. It overrides any existing role this user/group/workspace api key has on the resource. To target a user, pass only the user email. The user must be in your workspace. To target a group, pass only the group id. To target a workspace api key, pass the api key id. You must have admin access to the resource to share it.

        Parameters
        ----------
        resource_id : str
            The ID of the target resource.

        role : BodyShareWorkspaceResourceV1WorkspaceResourcesResourceIdSharePostRole
            Role to update the target principal with.

        resource_type : WorkspaceResourceType
            Resource type of the target resource.

        user_email : typing.Optional[str]
            The email of the user

        group_id : typing.Optional[str]
            The ID of the target group. To target the permissions principals have by default on this resource, use the value 'default'.

        workspace_api_key_id : typing.Optional[str]
            The ID of the target workspace API key. This isn't the same as the key itself that would you pass in the header for authentication. Workspace admins can find this in the workspace settings UI.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.workspace.share_workspace_resource(resource_id='resource_id', role="admin", resource_type="voice", )
        """
        _response = self._raw_client.share_workspace_resource(
            resource_id,
            role=role,
            resource_type=resource_type,
            user_email=user_email,
            group_id=group_id,
            workspace_api_key_id=workspace_api_key_id,
            request_options=request_options,
        )
        return _response.data

    def unshare_workspace_resource(
        self,
        resource_id: str,
        *,
        resource_type: WorkspaceResourceType,
        user_email: typing.Optional[str] = OMIT,
        group_id: typing.Optional[str] = OMIT,
        workspace_api_key_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Removes any existing role on a workspace resource from a user or a group. To target a user, pass only the user email. The user must be in your workspace. To target a group, pass only the group id. To target a workspace api key, pass the api key id. You must have admin access to the resource to unshare it. You cannot remove permissions from the user who created the resource.

        Parameters
        ----------
        resource_id : str
            The ID of the target resource.

        resource_type : WorkspaceResourceType
            Resource type of the target resource.

        user_email : typing.Optional[str]
            The email of the user

        group_id : typing.Optional[str]
            The ID of the target group. To target the permissions principals have by default on this resource, use the value 'default'.

        workspace_api_key_id : typing.Optional[str]
            The ID of the target workspace API key. This isn't the same as the key itself that would you pass in the header for authentication. Workspace admins can find this in the workspace settings UI.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from elevenlabs import ElevenLabs
        client = ElevenLabs(api_key="YOUR_API_KEY", )
        client.workspace.unshare_workspace_resource(resource_id='resource_id', resource_type="voice", )
        """
        _response = self._raw_client.unshare_workspace_resource(
            resource_id,
            resource_type=resource_type,
            user_email=user_email,
            group_id=group_id,
            workspace_api_key_id=workspace_api_key_id,
            request_options=request_options,
        )
        return _response.data


class AsyncWorkspaceClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawWorkspaceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawWorkspaceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawWorkspaceClient
        """
        return self._raw_client

    async def search_user_groups(
        self, *, name: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[WorkspaceGroupByNameResponseModel]:
        """
        Searches for user groups in the workspace. Multiple or no groups may be returned.

        Parameters
        ----------
        name : str
            Name of the target group.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[WorkspaceGroupByNameResponseModel]
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.workspace.search_user_groups(name='name', )
        asyncio.run(main())
        """
        _response = await self._raw_client.search_user_groups(name=name, request_options=request_options)
        return _response.data

    async def delete_member_from_user_group(
        self, group_id: str, *, email: str, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteWorkspaceGroupMemberResponseModel:
        """
        Removes a member from the specified group. This endpoint may only be called by workspace administrators.

        Parameters
        ----------
        group_id : str
            The ID of the target group.

        email : str
            The email of the target workspace member.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteWorkspaceGroupMemberResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.workspace.delete_member_from_user_group(group_id='group_id', email='email', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete_member_from_user_group(
            group_id, email=email, request_options=request_options
        )
        return _response.data

    async def add_member_to_user_group(
        self, group_id: str, *, email: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AddWorkspaceGroupMemberResponseModel:
        """
        Adds a member of your workspace to the specified group. This endpoint may only be called by workspace administrators.

        Parameters
        ----------
        group_id : str
            The ID of the target group.

        email : str
            The email of the target workspace member.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AddWorkspaceGroupMemberResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.workspace.add_member_to_user_group(group_id='group_id', email='email', )
        asyncio.run(main())
        """
        _response = await self._raw_client.add_member_to_user_group(
            group_id, email=email, request_options=request_options
        )
        return _response.data

    async def invite_user(
        self,
        *,
        email: str,
        group_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AddWorkspaceInviteResponseModel:
        """
        Sends an email invitation to join your workspace to the provided email. If the user doesn't have an account they will be prompted to create one. If the user accepts this invite they will be added as a user to your workspace and your subscription using one of your seats. This endpoint may only be called by workspace administrators. If the user is already in the workspace a 400 error will be returned.

        Parameters
        ----------
        email : str
            The email of the customer

        group_ids : typing.Optional[typing.Sequence[str]]
            The group ids of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AddWorkspaceInviteResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.workspace.invite_user(email='john.doe@testmail.com', )
        asyncio.run(main())
        """
        _response = await self._raw_client.invite_user(
            email=email, group_ids=group_ids, request_options=request_options
        )
        return _response.data

    async def invite_multiple_users(
        self,
        *,
        emails: typing.Sequence[str],
        group_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AddWorkspaceInviteResponseModel:
        """
        Sends email invitations to join your workspace to the provided emails. Requires all email addresses to be part of a verified domain. If the users don't have an account they will be prompted to create one. If the users accept these invites they will be added as users to your workspace and your subscription using one of your seats. This endpoint may only be called by workspace administrators.

        Parameters
        ----------
        emails : typing.Sequence[str]
            The email of the customer

        group_ids : typing.Optional[typing.Sequence[str]]
            The group ids of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AddWorkspaceInviteResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.workspace.invite_multiple_users(emails=['emails'], )
        asyncio.run(main())
        """
        _response = await self._raw_client.invite_multiple_users(
            emails=emails, group_ids=group_ids, request_options=request_options
        )
        return _response.data

    async def delete_existing_invitation(
        self, *, email: str, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteWorkspaceInviteResponseModel:
        """
        Invalidates an existing email invitation. The invitation will still show up in the inbox it has been delivered to, but activating it to join the workspace won't work. This endpoint may only be called by workspace administrators.

        Parameters
        ----------
        email : str
            The email of the customer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteWorkspaceInviteResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.workspace.delete_existing_invitation(email='john.doe@testmail.com', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete_existing_invitation(email=email, request_options=request_options)
        return _response.data

    async def update_member(
        self,
        *,
        email: str,
        is_locked: typing.Optional[bool] = OMIT,
        workspace_role: typing.Optional[BodyUpdateMemberV1WorkspaceMembersPostWorkspaceRole] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateWorkspaceMemberResponseModel:
        """
        Updates attributes of a workspace member. Apart from the email identifier, all parameters will remain unchanged unless specified. This endpoint may only be called by workspace administrators.

        Parameters
        ----------
        email : str
            Email of the target user.

        is_locked : typing.Optional[bool]
            Whether to lock or unlock the user account.

        workspace_role : typing.Optional[BodyUpdateMemberV1WorkspaceMembersPostWorkspaceRole]
            Role dictating permissions in the workspace.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateWorkspaceMemberResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.workspace.update_member(email='email', )
        asyncio.run(main())
        """
        _response = await self._raw_client.update_member(
            email=email, is_locked=is_locked, workspace_role=workspace_role, request_options=request_options
        )
        return _response.data

    async def delete_member(
        self, *, email: str, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteWorkspaceMemberResponseModel:
        """
        Deletes a workspace member. This endpoint may only be called by workspace administrators.

        Parameters
        ----------
        email : str
            Email of the target user.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteWorkspaceMemberResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.workspace.delete_member(email='email', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete_member(email=email, request_options=request_options)
        return _response.data

    async def get_resource(
        self,
        resource_id: str,
        *,
        resource_type: WorkspaceResourceType,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ResourceMetadataResponseModel:
        """
        Gets the metadata of a resource by ID.

        Parameters
        ----------
        resource_id : str
            The ID of the target resource.

        resource_type : WorkspaceResourceType
            Resource type of the target resource.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ResourceMetadataResponseModel
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.workspace.get_resource(resource_id='resource_id', resource_type="voice", )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_resource(
            resource_id, resource_type=resource_type, request_options=request_options
        )
        return _response.data

    async def share_workspace_resource(
        self,
        resource_id: str,
        *,
        role: BodyShareWorkspaceResourceV1WorkspaceResourcesResourceIdSharePostRole,
        resource_type: WorkspaceResourceType,
        user_email: typing.Optional[str] = OMIT,
        group_id: typing.Optional[str] = OMIT,
        workspace_api_key_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Grants a role on a workspace resource to a user or a group. It overrides any existing role this user/group/workspace api key has on the resource. To target a user, pass only the user email. The user must be in your workspace. To target a group, pass only the group id. To target a workspace api key, pass the api key id. You must have admin access to the resource to share it.

        Parameters
        ----------
        resource_id : str
            The ID of the target resource.

        role : BodyShareWorkspaceResourceV1WorkspaceResourcesResourceIdSharePostRole
            Role to update the target principal with.

        resource_type : WorkspaceResourceType
            Resource type of the target resource.

        user_email : typing.Optional[str]
            The email of the user

        group_id : typing.Optional[str]
            The ID of the target group. To target the permissions principals have by default on this resource, use the value 'default'.

        workspace_api_key_id : typing.Optional[str]
            The ID of the target workspace API key. This isn't the same as the key itself that would you pass in the header for authentication. Workspace admins can find this in the workspace settings UI.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.workspace.share_workspace_resource(resource_id='resource_id', role="admin", resource_type="voice", )
        asyncio.run(main())
        """
        _response = await self._raw_client.share_workspace_resource(
            resource_id,
            role=role,
            resource_type=resource_type,
            user_email=user_email,
            group_id=group_id,
            workspace_api_key_id=workspace_api_key_id,
            request_options=request_options,
        )
        return _response.data

    async def unshare_workspace_resource(
        self,
        resource_id: str,
        *,
        resource_type: WorkspaceResourceType,
        user_email: typing.Optional[str] = OMIT,
        group_id: typing.Optional[str] = OMIT,
        workspace_api_key_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Removes any existing role on a workspace resource from a user or a group. To target a user, pass only the user email. The user must be in your workspace. To target a group, pass only the group id. To target a workspace api key, pass the api key id. You must have admin access to the resource to unshare it. You cannot remove permissions from the user who created the resource.

        Parameters
        ----------
        resource_id : str
            The ID of the target resource.

        resource_type : WorkspaceResourceType
            Resource type of the target resource.

        user_email : typing.Optional[str]
            The email of the user

        group_id : typing.Optional[str]
            The ID of the target group. To target the permissions principals have by default on this resource, use the value 'default'.

        workspace_api_key_id : typing.Optional[str]
            The ID of the target workspace API key. This isn't the same as the key itself that would you pass in the header for authentication. Workspace admins can find this in the workspace settings UI.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from elevenlabs import AsyncElevenLabs
        import asyncio
        client = AsyncElevenLabs(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.workspace.unshare_workspace_resource(resource_id='resource_id', resource_type="voice", )
        asyncio.run(main())
        """
        _response = await self._raw_client.unshare_workspace_resource(
            resource_id,
            resource_type=resource_type,
            user_email=user_email,
            group_id=group_id,
            workspace_api_key_id=workspace_api_key_id,
            request_options=request_options,
        )
        return _response.data
