# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import pydantic
import typing
from .language_response_model import LanguageResponseModel
from .model_rates_response_model import ModelRatesResponseModel
from .model_response_model_concurrency_group import ModelResponseModelConcurrencyGroup
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class ModelResponseModel(UncheckedBaseModel):
    model_id: str = pydantic.Field()
    """
    The unique identifier of the model.
    """

    name: str = pydantic.Field()
    """
    The name of the model.
    """

    can_be_finetuned: bool = pydantic.Field()
    """
    Whether the model can be finetuned.
    """

    can_do_text_to_speech: bool = pydantic.Field()
    """
    Whether the model can do text-to-speech.
    """

    can_do_voice_conversion: bool = pydantic.Field()
    """
    Whether the model can do voice conversion.
    """

    can_use_style: bool = pydantic.Field()
    """
    Whether the model can use style.
    """

    can_use_speaker_boost: bool = pydantic.Field()
    """
    Whether the model can use speaker boost.
    """

    serves_pro_voices: bool = pydantic.Field()
    """
    Whether the model serves pro voices.
    """

    token_cost_factor: float = pydantic.Field()
    """
    The cost factor for the model.
    """

    description: str = pydantic.Field()
    """
    The description of the model.
    """

    requires_alpha_access: bool = pydantic.Field()
    """
    Whether the model requires alpha access.
    """

    max_characters_request_free_user: int = pydantic.Field()
    """
    The maximum number of characters that can be requested by a free user.
    """

    max_characters_request_subscribed_user: int = pydantic.Field()
    """
    The maximum number of characters that can be requested by a subscribed user.
    """

    maximum_text_length_per_request: int = pydantic.Field()
    """
    The maximum length of text that can be requested for this model.
    """

    languages: typing.List[LanguageResponseModel] = pydantic.Field()
    """
    The languages supported by the model.
    """

    model_rates: ModelRatesResponseModel = pydantic.Field()
    """
    The rates for the model.
    """

    concurrency_group: ModelResponseModelConcurrencyGroup = pydantic.Field()
    """
    The concurrency group for the model.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
